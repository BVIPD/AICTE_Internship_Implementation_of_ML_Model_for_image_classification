# -*- coding: utf-8 -*-
"""ImageClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1310KBiaJqTKvv9LbvWSHOW9kwDeVvEgX
"""

# 1. Load and normalize the dataset
from tensorflow.keras.datasets import cifar10
(train_images, train_labels), (test_images, test_labels) = cifar10.load_data()
train_images, test_images = train_images / 255.0, test_images / 255.0

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

# 2. Build the model
from tensorflow.keras import models,layers
model = models.Sequential([
    layers.Conv2D(32, (3,3),activation='relu' ,input_shape=(32,32,3)),
    layers.MaxPooling2D((2,2)),  #image(h,w) > image(h/2,w/2)

    layers.Conv2D(64, (3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64, (3,3),activation='relu'),
    layers.Flatten(),

    layers.Dense(64,activation='relu'),
    layers.Dense(10)
])

# 3. Train
import tensorflow as tf
model.compile(optimizer='adam',loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])
history = model.fit(train_images,train_labels,epochs=10,validation_data=(test_images,test_labels))

# 4. Predict probabilities
probability_model = tf.keras.Sequential([model,tf.keras.layers.Softmax()])

# 5. Test and visualize the result
import numpy as np
image = test_images[0]
image = np.expand_dims(image,axis=0)

predictions = probability_model.predict(image)
class_label = class_names[np.argmax(predictions[0])]

import matplotlib.pyplot as plt

plt.figure(figsize=(1, 1))
plt.imshow(test_images[0])
plt.xlabel(f"Predicted_label={class_label}", color="blue")
plt.show()

# 6. Evaluate the model
test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)
print('\nTest accuracy:', test_acc)